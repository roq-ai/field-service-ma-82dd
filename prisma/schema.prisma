generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model activity {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String          @db.VarChar(255)
  description        String          @db.VarChar(255)
  status             String          @db.VarChar(255)
  service_request_id String          @db.Uuid
  engineer_id        String          @db.Uuid
  created_at         DateTime        @default(now()) @db.Timestamp(6)
  updated_at         DateTime        @default(now()) @db.Timestamp(6)
  user               user            @relation(fields: [engineer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service_request    service_request @relation(fields: [service_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parts_order        parts_order[]
  schedule           schedule[]
}

model organization {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description     String?           @db.VarChar(255)
  name            String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  user_id         String            @db.Uuid
  tenant_id       String            @db.VarChar(255)
  user            user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_request service_request[]
}

model parts_order {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  part_name   String   @db.VarChar(255)
  quantity    Int
  status      String   @db.VarChar(255)
  activity_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  activity    activity @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model schedule {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time  DateTime  @db.Timestamp(6)
  end_time    DateTime? @db.Timestamp(6)
  status      String    @db.VarChar(255)
  engineer_id String    @db.Uuid
  activity_id String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  activity    activity  @relation(fields: [activity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user      @relation(fields: [engineer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model service_request {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status               String       @db.VarChar(255)
  problem_description  String       @db.VarChar(255)
  solution_description String?      @db.VarChar(255)
  organization_id      String       @db.Uuid
  customer_id          String       @db.Uuid
  created_at           DateTime     @default(now()) @db.Timestamp(6)
  updated_at           DateTime     @default(now()) @db.Timestamp(6)
  activity             activity[]
  user                 user         @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization         organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  firstName       String?           @db.VarChar(255)
  lastName        String?           @db.VarChar(255)
  roq_user_id     String            @db.VarChar(255)
  tenant_id       String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  activity        activity[]
  organization    organization[]
  schedule        schedule[]
  service_request service_request[]
}
